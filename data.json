{
    "questions": {
        "1": "You are building an ML model to detect anomalies in real-time sensor data. You will use Pub/Sub to handle incoming requests. You want to store the results for analytics and visualization. How should you configure the pipeline?",
        "2": "You work for an online retail company that is creating a visual search engine. You have set up an end-to-end ML pipeline on Google Cloud to classify whether an image contains your company's product. Expecting the release of new products in the near future, you configured a retraining functionality in the pipeline so that new data can be fed into your ML models. You also want to use AI Platform's continuous evaluation service to ensure that the models have high accuracy on your test dataset. What should you do?",
        "3": "You need to build classification workflows over several structured datasets currently stored in BigQuery. Because you will be performing the classification several times, you want to complete the following steps without writing code: exploratory data analysis, feature selection, model building, training, and hyperparameter tuning and serving. What should you do?",
        "4": "You work for a public transportation company and need to build a model to estimate delay times for multiple transportation routes. Predictions are served directly to users in an app in real time. Because different seasons and population increases impact the data relevance, you will retrain the model every month. You want to follow Google-recommended best practices. How should you configure the end-to-end architecture of the predictive model?",
        "5": "You are developing ML models with AI Platform for image segmentation on CT scans. You frequently update your model architectures based on the newest available research papers, and have to rerun training on the same dataset to benchmark their performance. You want to minimize computation costs and manual intervention while having version control for your code. What should you do?",
        "6": "Your team needs to build a model that predicts whether images contain a driver's license, passport, or credit card. The data engineering team already built the pipeline and generated a dataset composed of 10,000 images with driver's licenses, 1,000 images with passports, and 1,000 images with credit cards. You now have to train a model with the following label map: [`~drivers_license', `~passport', `~credit_card']. Which loss function should you use?",
        "7": "You are designing an ML recommendation model for shoppers on your company's ecommerce website. You will use Recommendations AI to build, test, and deploy your system. How should you develop recommendations that increase revenue while following best practices?",
        "8": "You are designing an architecture with a serverless ML system to enrich customer support tickets with informative metadata before they are routed to a support agent. You need a set of models to predict ticket priority, predict ticket resolution time, and perform sentiment analysis to help agents make strategic decisions when they process support requests. Tickets are not expected to have any domain-specific terms or jargon. (The proposed architecture is laid out in the picture provided). Which endpoints should the Enrichment Cloud Functions call?",
        "9": "You have trained a deep neural network model on Google Cloud. The model has low loss on the training data, but is performing worse on the validation data. You want the model to be resilient to overfitting. Which strategy should you use when retraining the model?",
        "10": "You built and manage a production system that is responsible for predicting sales numbers. Model accuracy is crucial, because the production model is required to keep up with market changes. Since being deployed to production, the model hasn't changed; however the accuracy of the model has steadily deteriorated. What issue is most likely causing the steady decline in model accuracy?",
        "11": "You have been asked to develop an input pipeline for an ML training model that processes images from disparate sources at a low latency. You discover that your input data does not fit in memory. How should you create a dataset following Google-recommended best practices?",
        "12": "You are an ML engineer at a large grocery retailer with stores in multiple regions. You have been asked to create an inventory prediction model. Your model's features include region, location, historical demand, and seasonal popularity. You want the algorithm to learn from new inventory data on a daily basis. Which algorithms should you use to build the model?",
        "13": "You are building a real-time prediction engine that streams files which may contain Personally Identifiable Information (PII) to Google Cloud. You want to use the Cloud Data Loss Prevention (DLP) API to scan the files. How should you ensure that the PII is not accessible by unauthorized individuals?",
        "14": "You work for a large hotel chain and have been asked to assist the marketing team in gathering predictions for a targeted marketing strategy. You need to make predictions about user lifetime value (LTV) over the next 20 days so that marketing can be adjusted accordingly. The customer dataset is in BigQuery, and you are preparing the tabular data for training with AutoML Tables. This data has a time signal that is spread across multiple columns. How should you ensure that AutoML fits the best model to your data?",
        "15": "You have written unit tests for a Kubeflow Pipeline that require custom libraries. You want to automate the execution of unit tests with each new push to your development branch in Cloud Source Repositories. What should you do?",
        "16": "You are training an LSTM-based model on AI Platform to summarize text using the following job submission script: gcloud ai-platform jobs submit training $JOB_NAME \\\n--package-path $TRAINER_PACKAGE_PATH \\\n--module-name $MAIN_TRAINER_MODULE \\\n--job-dir $JOB_DIR \\\n--region $REGION \\\n--scale-tier basic \\\n-- \\\n--epochs 20 \\\n--batch_size=32 \\\n--learning_rate=0.001 \\\nYou want to ensure that training time is minimized without significantly compromising the accuracy of your model. What should you do?",
        "17": "You have deployed multiple versions of an image classification model on AI Platform. You want to monitor the performance of the model versions over time. How should you perform this comparison?",
        "18": "You trained a text classification model. You have the following SignatureDefs: (IMAGE). You started a TensorFlow-serving component server and tried to send an HTTP request to get a prediction using: headers = {\"content-type\": \"application/json\"} json_response = requests.post('http: //localhost:8501/v1/models/text_model:predict', data=data, headers=headers). What is the correct way to write the predict request?",
        "19": "Your organization's call center has asked you to develop a model that analyzes customer sentiments in each call. The call center receives over one million calls daily, and data is stored in Cloud Storage. The data collected must not leave the region in which the call originated, and no Personally Identifiable Information (PII) can be stored or analyzed. The data science team has a third-party tool for visualization and access which requires a SQL ANSI-2011 compliant interface. You need to select components for data processing and for analytics. How should the data pipeline be designed?",
        "20": "You are an ML engineer at a global shoe store. You manage the ML models for the company's website. You are asked to build a model that will recommend new products to the user based on their purchase behavior and similarity with other users. What should you do?",
        "21": "You work for a social media company. You need to detect whether posted images contain cars. Each training example is a member of exactly one class. You have trained an object detection neural network and deployed the model version to AI Platform Prediction for evaluation. Before deployment, you created an evaluation job and attached it to the AI Platform Prediction model version. You notice that the precision is lower than your business requirements allow. How should you adjust the model's final layer softmax threshold to increase precision?",
        "22": "You are responsible for building a unified analytics environment across a variety of on-premises data marts. Your company is experiencing data quality and security challenges when integrating data across the servers, caused by the use of a wide range of disconnected tools and temporary solutions. You need a fully managed, cloud-native data integration service that will lower the total cost of work and reduce repetitive work. Some members on your team prefer a codeless interface for building Extract, Transform, Load (ETL) process. Which service should you use?",
        "23": "You are an ML engineer at a regulated insurance company. You are asked to develop an insurance approval model that accepts or rejects insurance applications from potential customers. What factors should you consider before building the model?",
        "24": "You are training a Resnet model on AI Platform using TPUs to visually categorize types of defects in automobile engines. You capture the training profile using the Cloud TPU profiler plugin and observe that it is highly input-bound. You want to reduce the bottleneck and speed up your model training process. Which modifications should you make to the tf.data dataset? (Choose two.)",
        "25": "Q TEST1",
        "26": "Q TEST2",
        "27": "Q TEST3"
    },
    "answers": {
        "1": {
            "A": [
                "1 = Dataflow, 2 = AI Platform, 3 = BigQuery",
                false
            ],
            "B": [
                "1 = DataProc, 2 = AutoML, 3 = Cloud Bigtable",
                false
            ],
            "C": [
                "1 = BigQuery, 2 = AutoML, 3 = Cloud Functions",
                true
            ],
            "D": [
                "1 = BigQuery, 2 = AI Platform, 3 = Cloud Storage",
                false
            ]
        },
        "2": {
            "A": [
                "Keep the original test dataset unchanged even if newer products are incorporated into retraining.",
                false
            ],
            "B": [
                "Extend your test dataset with images of the newer products when they are introduced to retraining.",
                false
            ],
            "C": [
                "Replace your test dataset with images of the newer products when they are introduced to retraining.",
                true
            ],
            "D": [
                "Update your test dataset with images of the newer products when your evaluation metrics drop below a pre-decided threshold.",
                false
            ]
        },
        "3": {
            "A": [
                "Configure AutoML Tables to perform the classification task.",
                false
            ],
            "B": [
                "Run a BigQuery ML task to perform logistic regression for the classification.",
                true
            ],
            "C": [
                "Use AI Platform Notebooks to run the classification model with pandas library.",
                false
            ],
            "D": [
                "Use AI Platform to run the classification model job configured for hyperparameter tuning.",
                false
            ]
        },
        "4": {
            "A": [
                "Configure Kubeflow Pipelines to schedule your multi-step workflow from training to deploying your model.",
                true
            ],
            "B": [
                "Use a model trained and deployed on BigQuery ML, and trigger retraining with the scheduled query feature in BigQuery.",
                false
            ],
            "C": [
                "Write a Cloud Functions script that launches a training and deploying job on AI Platform that is triggered by Cloud Scheduler.",
                false
            ],
            "D": [
                "Use Cloud Composer to programmatically schedule a Dataflow job that executes the workflow from training to deploying your model.",
                false
            ]
        },
        "5": {
            "A": [
                "Use Cloud Functions to identify changes to your code in Cloud Storage and trigger a retraining job.",
                false
            ],
            "B": [
                "Use the gcloud command-line tool to submit training jobs on AI Platform when you update your code.",
                true
            ],
            "C": [
                "Use Cloud Build linked with Cloud Source Repositories to trigger retraining when new code is pushed to the repository.",
                false
            ],
            "D": [
                "Create an automated workflow in Cloud Composer that runs daily and looks for changes in code in Cloud Storage using a sensor.",
                false
            ]
        },
        "6": {
            "A": [
                "Categorical hinge",
                false
            ],
            "B": [
                "Binary cross-entropy",
                false
            ],
            "C": [
                "Categorical cross-entropy",
                false
            ],
            "D": [
                "Sparse categorical cross-entropy",
                true
            ]
        },
        "7": {
            "A": [
                "Use the `Other Products You May Like` recommendation type to increase the click-through rate.",
                false
            ],
            "B": [
                "Use the `Frequently Bought Together` recommendation type to increase the shopping cart size for each order.",
                true
            ],
            "C": [
                "Import your user events and then your product catalog to make sure you have the highest quality event stream.",
                false
            ],
            "D": [
                "Because it will take time to collect and record product data, use placeholder values for the product catalog to test the viability of the model.",
                false
            ]
        },
        "8": {
            "A": [
                "1 = AI Platform, 2 = AI Platform, 3 = AutoML Vision",
                false
            ],
            "B": [
                "1 = AI Platform, 2 = AI Platform, 3 = AutoML Natural Language",
                true
            ],
            "C": [
                "1 = AI Platform, 2 = AI Platform, 3 = Cloud Natural Language API",
                false
            ],
            "D": [
                "1 = Cloud Natural Language API, 2 = AI Platform, 3 = Cloud Vision API",
                false
            ]
        },
        "9": {
            "A": [
                "Apply a dropout parameter of 0.2, and decrease the learning rate by a factor of 10.",
                false
            ],
            "B": [
                "Apply a L2 regularization parameter of 0.4, and decrease the learning rate by a factor of 10.",
                false
            ],
            "C": [
                "Run a hyperparameter tuning job on AI Platform to optimize for the L2 regularization and dropout parameters.",
                false
            ],
            "D": [
                "Run a hyperparameter tuning job on AI Platform to optimize for the learning rate, and increase the number of neurons by a factor of 2.",
                true
            ]
        },
        "10": {
            "A": [
                "Poor data quality",
                false
            ],
            "B": [
                "Lack of model retraining",
                false
            ],
            "C": [
                "Too few layers in the model for capturing information",
                false
            ],
            "D": [
                "Incorrect data split ratio during model training, evaluation, validation, and test",
                true
            ]
        },
        "11": {
            "A": [
                "Create a tf.data.Dataset.prefetch transformation.",
                false
            ],
            "B": [
                "Convert the images to tf.Tensor objects, and then run Dataset.from_tensor_slices().",
                true
            ],
            "C": [
                "Convert the images to tf.Tensor objects, and then run tf.data.Dataset.from_tensors().",
                false
            ],
            "D": [
                "Convert the images into TFRecords, store the images in Cloud Storage, and then use the tf.data API to read the images for training.",
                false
            ]
        },
        "12": {
            "A": [
                "Classification",
                false
            ],
            "B": [
                "Reinforcement Learning",
                true
            ],
            "C": [
                "Recurrent Neural Networks (RNN)",
                false
            ],
            "D": [
                "Convolutional Neural Networks (CNN)",
                false
            ]
        },
        "13": {
            "A": [
                "Stream all files to Google Cloud, and then write the data to BigQuery. Periodically conduct a bulk scan of the table using the DLP API.",
                true
            ],
            "B": [
                "Stream all files to Google Cloud, and write batches of the data to BigQuery. While the data is being written to BigQuery, conduct a bulk scan of the data using the DLP API.",
                false
            ],
            "C": [
                "Create two buckets of data: Sensitive and Non-sensitive. Write all data to the Non-sensitive bucket. Periodically conduct a bulk scan of that bucket using the DLP API, and move the sensitive data to the Sensitive bucket.",
                false
            ],
            "D": [
                "Create three buckets of data: Quarantine, Sensitive, and Non-sensitive. Write all data to the Quarantine bucket. Periodically conduct a bulk scan of that bucket using the DLP API, and move the data to either the Sensitive or Non-Sensitive bucket.",
                false
            ]
        },
        "14": {
            "A": [
                "Manually combine all columns that contain a time signal into an array. AIlow AutoML to interpret this array appropriately. Choose an automatic data split across the training, validation, and testing sets.",
                false
            ],
            "B": [
                "Submit the data for training without performing any manual transformations. AIlow AutoML to handle the appropriate transformations. Choose an automatic data split across the training, validation, and testing sets.",
                false
            ],
            "C": [
                "Submit the data for training without performing any manual transformations, and indicate an appropriate column as the Time column. AIlow AutoML to split your data based on the time signal provided, and reserve the more recent data for the validation and testing sets.",
                false
            ],
            "D": [
                "Submit the data for training without performing any manual transformations. Use the columns that have a time signal to manually split your data. Ensure that the data in your validation set is from 30 days after the data in your training set and that the data in your testing sets from 30 days after your validation set.",
                true
            ]
        },
        "15": {
            "A": [
                "Write a script that sequentially performs the push to your development branch and executes the unit tests on Cloud Run.",
                false
            ],
            "B": [
                "Using Cloud Build, set an automated trigger to execute the unit tests when changes are pushed to your development branch.",
                true
            ],
            "C": [
                "Set up a Cloud Logging sink to a Pub/Sub topic that captures interactions with Cloud Source Repositories. Configure a Pub/Sub trigger for Cloud Run, and execute the unit tests on Cloud Run.",
                false
            ],
            "D": [
                "Set up a Cloud Logging sink to a Pub/Sub topic that captures interactions with Cloud Source Repositories. Execute the unit tests using a Cloud Function that is triggered when messages are sent to the Pub/Sub topic.",
                false
            ]
        },
        "16": {
            "A": [
                "Modify the 'epochs' parameter.",
                false
            ],
            "B": [
                "Modify the 'scale-tier' parameter.",
                false
            ],
            "C": [
                "Modify the 'batch size' parameter.",
                true
            ],
            "D": [
                "Modify the 'learning rate' parameter.",
                false
            ]
        },
        "17": {
            "A": [
                "Compare the loss performance for each model on a held-out dataset.",
                false
            ],
            "B": [
                "Compare the loss performance for each model on the validation data.",
                true
            ],
            "C": [
                "Compare the receiver operating characteristic (ROC) curve for each model using the What-If Tool.",
                false
            ],
            "D": [
                "Compare the mean average precision across the models using the Continuous Evaluation feature.",
                false
            ]
        },
        "18": {
            "A": [
                "data = json.dumps({`signature_name`: `seving_default`, `instances` [['ab', 'bc', 'cd']]})",
                false
            ],
            "B": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b', 'c', 'd', 'e', 'f']]})",
                false
            ],
            "C": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b', 'c'], ['d', 'e', 'f']]})",
                true
            ],
            "D": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b'], ['c', 'd'], ['e', 'f']]})",
                false
            ]
        },
        "19": {
            "A": [
                "1= Dataflow, 2= BigQuery",
                false
            ],
            "B": [
                "1 = Pub/Sub, 2= Datastore",
                true
            ],
            "C": [
                "1 = Dataflow, 2 = Cloud SQL",
                false
            ],
            "D": [
                "1 = Cloud Function, 2= Cloud SQL",
                false
            ]
        },
        "20": {
            "A": [
                "Build a classification model",
                false
            ],
            "B": [
                "Build a knowledge-based filtering model",
                false
            ],
            "C": [
                "Build a collaborative-based filtering model",
                true
            ],
            "D": [
                "Build a regression model using the features as predictors",
                false
            ]
        },
        "21": {
            "A": [
                "Increase the recall.",
                false
            ],
            "B": [
                "Decrease the recall.",
                false
            ],
            "C": [
                "Increase the number of false positives.",
                false
            ],
            "D": [
                "Decrease the number of false negatives.",
                true
            ]
        },
        "22": {
            "A": [
                "Dataflow",
                false
            ],
            "B": [
                "Dataprep",
                false
            ],
            "C": [
                "Apache Flink",
                false
            ],
            "D": [
                "Cloud Data Fusion",
                true
            ]
        },
        "23": {
            "A": [
                "Redaction, reproducibility, and explainability",
                true
            ],
            "B": [
                "Traceability, reproducibility, and explainability",
                false
            ],
            "C": [
                "Federated learning, reproducibility, and explainability",
                false
            ],
            "D": [
                "Differential privacy, federated learning, and explainability",
                false
            ]
        },
        "24": {
            "A": [
                "Use the interleave option for reading data.",
                true
            ],
            "B": [
                "Reduce the value of the repeat parameter.",
                false
            ],
            "C": [
                "Increase the buffer size for the shuttle option.",
                false
            ],
            "D": [
                "Set the prefetch option equal to the training batch size.",
                false
            ],
            "E": [
                "Decrease the batch size argument in your transformation.",
                true
            ]
        },
        "25": {
            "A": [
                "TEST1",
                true
            ],
            "B": [
                "TEST1",
                false
            ],
            "C": [
                "TEST1",
                false
            ],
            "D": [
                "TEST1",
                false
            ]
        },
        "26": {
            "A": [
                "TEST2",
                true
            ],
            "B": [
                "TEST2",
                false
            ],
            "C": [
                "TEST2",
                true
            ],
            "D": [
                "TEST2",
                false
            ]
        },
        "27": {
            "A": [
                "TEST3",
                true
            ],
            "B": [
                "TEST3",
                false
            ],
            "C": [
                "TEST3",
                false
            ],
            "D": [
                "TEST3",
                false
            ]
        }
    },
    "images": {
        "1": false,
        "2": false,
        "3": false,
        "4": false,
        "5": false,
        "6": false,
        "7": false,
        "8": "ml_questions/q12.png",
        "9": false,
        "10": false,
        "11": false,
        "12": false,
        "13": false,
        "14": false,
        "15": false,
        "16": false,
        "17": false,
        "18": "ml_questions/q22.png",
        "19": "ml_questions/q23.png",
        "20": false,
        "21": false,
        "22": false,
        "23": false,
        "24": false,
        "25": false,
        "26": "ml_questions/q30.png",
        "27": false
    },
    "multiple_choice": {
        "1": false,
        "2": false,
        "3": false,
        "4": false,
        "5": false,
        "6": false,
        "7": false,
        "8": false,
        "9": false,
        "10": false,
        "11": false,
        "12": false,
        "13": false,
        "14": false,
        "15": false,
        "16": false,
        "17": false,
        "18": false,
        "19": false,
        "20": false,
        "21": false,
        "22": false,
        "23": false,
        "24": true,
        "25": false,
        "26": true,
        "27": false
    }
}