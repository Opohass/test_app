{
    "questions": {
        "1": "You are building an ML model to detect anomalies in real-time sensor data. You will use Pub/Sub to handle incoming requests. You want to store the results for analytics and visualization. How should you configure the pipeline?",
        "2": "Your organization wants to make its internal shuttle service route more efficient. The shuttles currently stop at all pick-up points across the city every 30 minutes between 7 am and 10 am. The development team has already built an application on Google Kubernetes Engine that requires users to confirm their presence and shuttle station one day in advance. What approach should you take?",
        "3": "You were asked to investigate failures of a production line component based on sensor readings. After receiving the dataset, you discover that less than 1% of the readings are positive examples representing failure incidents. You have tried to train several classification models, but none of them converge. How should you resolve the class imbalance problem?",
        "4": "You want to rebuild your ML pipeline for structured data on Google Cloud. You are using PySpark to conduct data transformations at scale, but your pipelines are taking over 12 hours to run. To speed up development and pipeline run time, you want to use a serverless tool and SQL syntax. You have already moved your raw data into Cloud Storage. How should you build the pipeline on Google Cloud while meeting the speed and processing requirements?",
        "5": "You manage a team of data scientists who use a cloud-based backend system to submit training jobs. This system has become very difficult to administer, and you want to use a managed service instead. The data scientists you work with use many different frameworks, including Keras, PyTorch, theano, Scikit-learn, and custom libraries. What should you do?",
        "6": "You work for an online retail company that is creating a visual search engine. You have set up an end-to-end ML pipeline on Google Cloud to classify whether an image contains your company's product. Expecting the release of new products in the near future, you configured a retraining functionality in the pipeline so that new data can be fed into your ML models. You also want to use AI Platform's continuous evaluation service to ensure that the models have high accuracy on your test dataset. What should you do?",
        "7": "You need to build classification workflows over several structured datasets currently stored in BigQuery. Because you will be performing the classification several times, you want to complete the following steps without writing code: exploratory data analysis, feature selection, model building, training, and hyperparameter tuning and serving. What should you do?",
        "8": "You work for a public transportation company and need to build a model to estimate delay times for multiple transportation routes. Predictions are served directly to users in an app in real time. Because different seasons and population increases impact the data relevance, you will retrain the model every month. You want to follow Google-recommended best practices. How should you configure the end-to-end architecture of the predictive model?",
        "9": "You are developing ML models with AI Platform for image segmentation on CT scans. You frequently update your model architectures based on the newest available research papers, and have to rerun training on the same dataset to benchmark their performance. You want to minimize computation costs and manual intervention while having version control for your code. What should you do?",
        "10": "Your team needs to build a model that predicts whether images contain a driver's license, passport, or credit card. The data engineering team already built the pipeline and generated a dataset composed of 10,000 images with driver's licenses, 1,000 images with passports, and 1,000 images with credit cards. You now have to train a model with the following label map: [`~drivers_license', `~passport', `~credit_card']. Which loss function should you use?",
        "11": "You are designing an ML recommendation model for shoppers on your company's ecommerce website. You will use Recommendations AI to build, test, and deploy your system. How should you develop recommendations that increase revenue while following best practices?",
        "12": "You are designing an architecture with a serverless ML system to enrich customer support tickets with informative metadata before they are routed to a support agent. You need a set of models to predict ticket priority, predict ticket resolution time, and perform sentiment analysis to help agents make strategic decisions when they process support requests. Tickets are not expected to have any domain-specific terms or jargon. (The proposed architecture is laid out in the picture provided). Which endpoints should the Enrichment Cloud Functions call?",
        "13": "You have trained a deep neural network model on Google Cloud. The model has low loss on the training data, but is performing worse on the validation data. You want the model to be resilient to overfitting. Which strategy should you use when retraining the model?",
        "14": "You built and manage a production system that is responsible for predicting sales numbers. Model accuracy is crucial, because the production model is required to keep up with market changes. Since being deployed to production, the model hasn't changed; however the accuracy of the model has steadily deteriorated. What issue is most likely causing the steady decline in model accuracy?",
        "15": "You have been asked to develop an input pipeline for an ML training model that processes images from disparate sources at a low latency. You discover that your input data does not fit in memory. How should you create a dataset following Google-recommended best practices?",
        "16": "You are an ML engineer at a large grocery retailer with stores in multiple regions. You have been asked to create an inventory prediction model. Your model's features include region, location, historical demand, and seasonal popularity. You want the algorithm to learn from new inventory data on a daily basis. Which algorithms should you use to build the model?",
        "17": "You are building a real-time prediction engine that streams files which may contain Personally Identifiable Information (PII) to Google Cloud. You want to use the Cloud Data Loss Prevention (DLP) API to scan the files. How should you ensure that the PII is not accessible by unauthorized individuals?",
        "18": "You work for a large hotel chain and have been asked to assist the marketing team in gathering predictions for a targeted marketing strategy. You need to make predictions about user lifetime value (LTV) over the next 20 days so that marketing can be adjusted accordingly. The customer dataset is in BigQuery, and you are preparing the tabular data for training with AutoML Tables. This data has a time signal that is spread across multiple columns. How should you ensure that AutoML fits the best model to your data?",
        "19": "You have written unit tests for a Kubeflow Pipeline that require custom libraries. You want to automate the execution of unit tests with each new push to your development branch in Cloud Source Repositories. What should you do?",
        "20": "You are training an LSTM-based model on AI Platform to summarize text using the following job submission script: gcloud ai-platform jobs submit training $JOB_NAME \\\n--package-path $TRAINER_PACKAGE_PATH \\\n--module-name $MAIN_TRAINER_MODULE \\\n--job-dir $JOB_DIR \\\n--region $REGION \\\n--scale-tier basic \\\n-- \\\n--epochs 20 \\\n--batch_size=32 \\\n--learning_rate=0.001 \\\nYou want to ensure that training time is minimized without significantly compromising the accuracy of your model. What should you do?",
        "21": "You have deployed multiple versions of an image classification model on AI Platform. You want to monitor the performance of the model versions over time. How should you perform this comparison?",
        "22": "You trained a text classification model. You have the following SignatureDefs: (IMAGE). You started a TensorFlow-serving component server and tried to send an HTTP request to get a prediction using: headers = {\"content-type\": \"application/json\"} json_response = requests.post('http: //localhost:8501/v1/models/text_model:predict', data=data, headers=headers). What is the correct way to write the predict request?",
        "23": "Your organization's call center has asked you to develop a model that analyzes customer sentiments in each call. The call center receives over one million calls daily, and data is stored in Cloud Storage. The data collected must not leave the region in which the call originated, and no Personally Identifiable Information (PII) can be stored or analyzed. The data science team has a third-party tool for visualization and access which requires a SQL ANSI-2011 compliant interface. You need to select components for data processing and for analytics. How should the data pipeline be designed?",
        "24": "You are an ML engineer at a global shoe store. You manage the ML models for the company's website. You are asked to build a model that will recommend new products to the user based on their purchase behavior and similarity with other users. What should you do?",
        "25": "You work for a social media company. You need to detect whether posted images contain cars. Each training example is a member of exactly one class. You have trained an object detection neural network and deployed the model version to AI Platform Prediction for evaluation. Before deployment, you created an evaluation job and attached it to the AI Platform Prediction model version. You notice that the precision is lower than your business requirements allow. How should you adjust the model's final layer softmax threshold to increase precision?",
        "26": "You are responsible for building a unified analytics environment across a variety of on-premises data marts. Your company is experiencing data quality and security challenges when integrating data across the servers, caused by the use of a wide range of disconnected tools and temporary solutions. You need a fully managed, cloud-native data integration service that will lower the total cost of work and reduce repetitive work. Some members on your team prefer a codeless interface for building Extract, Transform, Load (ETL) process. Which service should you use?",
        "27": "You are an ML engineer at a regulated insurance company. You are asked to develop an insurance approval model that accepts or rejects insurance applications from potential customers. What factors should you consider before building the model?",
        "28": "You are training a Resnet model on AI Platform using TPUs to visually categorize types of defects in automobile engines. You capture the training profile using the Cloud TPU profiler plugin and observe that it is highly input-bound. You want to reduce the bottleneck and speed up your model training process. Which modifications should you make to the tf.data dataset? (Choose two.)",
        "29": "You need to build an object detection model for a small startup company to identify if and where the company\u2019s logo appears in an image. You were given a large repository of images, some with logos and some without.\nThese images are not yet labelled. You need to label these pictures, and then train and deploy the model. What should you do?",
        "30": "You work for a gaming company that develops and manages a popular massively multiplayer online (MMO) game.\nThe game\u2019s environment is open-ended, and a large number of positions and moves can be taken by a player. Your team has developed an ML model with TensorFlow that predicts the next move of each player.\nEdge deployment is not possible, but low-latency serving is required. How should you configure the deployment?",
        "31": "You work for a textile manufacturer and have been asked to build a model to detect and classify fabric defects.\nYou trained a machine learning model with high recall based on high resolution images taken at the end of the production line. You want quality control inspectors to gain trust in your model.\nWhich technique should you use to understand the rationale of your classifier?",
        "32": "You work for a large financial institution that is planning to use Dialogflow to create a chatbot for the company\u2019s mobile app.\nYou have reviewed old chat logs and tagged each conversation for intent based on each customer\u2019s stated intention for contacting customer service.\nAbout 70% of customer inquiries are simple requests that are solved within 10 intents. The remaining 30% of inquiries require much longer and more complicated requests.\nWhich intents should you automate first?",
        "33": "You work for a manufacturing company that owns a high-value machine which has several machine settings and multiple sensors.\nA history of the machine\u2019s hourly sensor readings and known failure event data are stored in BigQuery. You need to predict if the machine will fail within the next 3 days in order to schedule maintenance before the machine fails.\nWhich data preparation and model training steps should you take?",
        "34": "You work on a team where the process for deploying a model into production starts with data scientists training different versions of models in a Kubeflow pipeline.\nThe workflow then stores the new model artifact into the corresponding Cloud Storage bucket. You need to build the next steps of the pipeline after the submitted model is ready to be tested and deployed in production on AI Platform.\nHow should you configure the architecture before deploying the model to production?",
        "35": "You are an ML engineer at a media company. You want to use machine learning to analyze video content, identify objects, and alert users if there is inappropriate content.\nWhich Google Cloud products should you use to build this project?",
        "36": "Your team is using a TensorFlow Inception-v3 CNN model pretrained on ImageNet for an image classification prediction challenge on 10,000 images. You will use AI Platform to perform the model training.\nWhat TensorFlow distribution strategy and AI Platform training job configuration should you use to train the model and optimize for wall-clock time?",
        "37": "You work for a large retailer. You want to use ML to forecast future sales leveraging 10 years of historical sales data.\nThe historical data is stored in Cloud Storage in Avro format. You want to rapidly experiment with all the available data.\nHow should you build and train your model for the sales forecast?",
        "38": "You need to write a generic test to verify whether Dense Neural Network (DNN) models automatically released by your team have a sufficient number of parameters to learn the task for which they were built.\nWhat should you do?",
        "39": "Your team works on a smart city project with wireless sensor networks and a set of gateways for transmitting sensor data. You have to cope with many design choices. You want, for each of the problems under study, to find the simplest solution.\nFor example, it is necessary to decide on the placement of nodes so that the result is the most economical and inclusive. An algorithm without data tagging must be used.\nWhich of the following choices do you think is the most suitable?",
        "40": "Your client has an e-commerce site for commercial spare parts for cars with competitive prices. It started with the small car sector but is continually adding products. Since 80% of them operate in a B2B market, he wants to ensure that his customers are encouraged to use the new products that he gradually offers on the site quickly and profitably.\nWhich GCP service can be valuable in this regard and in what way?",
        "41": "You are working on an NLP model. So, you are dealing with words and sentences, not numbers. Your problem is to categorize these words and make sense of them. Your manager told you that you have to use embeddings.\nWhich of the following techniques are not related to embeddings?",
        "42": "You are a junior Data Scientist and are working on a deep neural network model with Tensorflow to optimize the level of customer satisfaction for after-sales services with the goal of creating greater client loyalty.\nYou are struggling with your model (learning rates, hidden layers and nodes selection) for optimizing processing and to let it converge in the fastest way.\nWhich is your problem, in ML language?",
        "43": "You work in a major banking institution. The Management has decided to rapidly launch a bank loan service, as the Government has created a series of \u201cfirst home\u201d facilities for the younger population.\nThe goal is to carry out the automatic management of the required documents (certificates, origin documents, legal information) so that the practice can be built and verified automatically using the data and documents provided by customers and can be managed in a short time and with the minimum contribution of the scarce specialized personnel.\nWhich of these GCP services can you use?",
        "44": "You work for a large retail company. You are preparing a marketing model. The model will have to make predictions based on the historical and analytical data of the e-commerce site (analytics-360). In particular, customer loyalty and remarketing possibilities should be studied. You work on historical tabular data. You want to quickly create an optimal model, both from the point of view of the algorithm used and the tuning and life cycle of the model.\nWhat are the two best services you can use?",
        "45": "Your company operates an innovative auction site for furniture from all times. You have to create a series of ML models that allow you, starting from the photos, to establish the period, style and type of the piece of furniture depicted.\nFurthermore, the model must be able to determine whether the furniture is interesting and require it to be subject to a more detailed estimate. You want Google Cloud to help you reach this ambitious goal faster.\nWhich of the following services do you think is the most suitable?",
        "46": "You are using an AI Platform, and you are working with a series of demanding training jobs. So, you want to use TPUs instead of CPUs. You are not using Docker images or custom containers.\nWhat is the simplest configuration to indicate if you do not have particular needs to customize in the YAML configuration file?",
        "47": "You work for an industrial company that wants to improve its quality system. It has developed its own deep neural network model with Tensorflow to identify the semi-finished products to be discarded with images taken from the production lines in the various production phases.\nYou need to monitor the performance of your models and let them go faster.\nWhich is the best solution that you can adopt?",
        "48": "Your team needs to create a model for managing security in restricted areas of a campus.\nEverything that happens in these areas is filmed and, instead of having a physical surveillance service, the videos must be managed by a model capable of intercepting unauthorized people and vehicles, especially at particular times.\nWhat are the GCP services that allow you to achieve all this with minimal effort?",
        "49": "With your team you have to decide the strategy for implementing an online forecasting model in production.\nThis template needs to work with both a web interface as well as DialogFlow and Google Assistant and a lot of requests are expected.\nYou are concerned that the final system is not efficient and scalable enough, and you are looking for the simplest and most managed GCP solution.\nWhich of these can be the solution?",
        "50": "You work for a digital publishing website with an excellent technical and cultural level, where you have both famous authors and unknown experts who express ideas and insights.\nYou, therefore, have an extremely demanding audience with strong interests that can be of various types.\nUsers have a small set of articles that they can read for free every month. Then they need to sign up for a paid subscription.\nYou have been asked to prepare an ML training model that processes user readings and article preferences. You need to predict trends and topics that users will prefer.\nBut when you train your DNN with Tensorflow, your input data does not fit into RAM memory.\nWhat can you do in the simplest way?",
        "51": "You are working on a deep neural network model with Tensorflow. Your model is complex, and you work with very large datasets full of numbers.\nYou want to increase performances. But you cannot use further resources.\nYou are afraid that you are not going to deliver your project in time.\nYour mentor said to you that normalization could be a solution.\nWhich of the following choices do you think is not for data normalization?",
        "52": "You need to develop and train a model capable of analyzing snapshots taken from a moving vehicle and detecting if obstacles arise. Your work environment is an AI Platform (currently Vertex AI).\nWhich technique or algorithm do you think is best to use?",
        "53": "You are starting to operate as a Data Scientist and are working on a deep neural network model with Tensorflow to optimize customer satisfaction for after-sales services to create greater client loyalty.\nYou are doing Feature Engineering, and your focus is to minimize bias and increase accuracy. Your coordinator has told you that by doing so you risk having problems. He explained to you that, in addition to the bias, you must consider another factor to be optimized. Which one?",
        "54": "You have a Linear Regression model for the optimal management of supplies to a sales network based on a large number of different driving factors. You want to simplify the model to make it more efficient and faster. Your first goal is to synthesize the features without losing the information content that comes from them.\nWhich of these is the best technique?",
        "55": "You work for a digital publishing website with an excellent technical and cultural level, where you have both famous authors and unknown experts who express ideas and insights. You, therefore, have an extremely demanding audience with strong interests of various types. Users have a small set of articles that they can read for free every month; they need to sign up for a paid subscription.\nYou aim to provide your audience with pointers to articles that they will indeed find of interest to themselves.\nWhich of these models can be useful to you?",
        "56": "You work for an important Banking group.\nThe purpose of your current project is the automatic and smart acquisition of data from documents and modules of different types.\nYou work on big datasets with a lot of private information that cannot be distributed and disclosed.\nYou are asked to replace sensitive data with specific surrogate characters.\nWhich of the following techniques do you think is best to use?",
        "57": "Your company traditionally deals with statistical analysis on data. The services have been integrated for some years with ML models for forecasting, but analyzes and simulations of all kinds are carried out.\nSo you are using 2 types of tools but you have been told that it is possible to have more levels of integration between traditional statistical methodologies and those more related to AI / ML processes.\nWhich tool is the best one for your needs?",
        "58": "Your customer has an online dating platform that, among other things, analyzes the degree of affinity between the various people. Obviously, it already uses ML models and uses, in particular, XGBoost, the gradient boosting decision tree algorithm, and is obtaining excellent results.\nAll its development processes follow CI / CD specifications and use Docker containers. The requirement is to classify users in various ways and update models frequently, based on new parameters entered into the platform by the users themselves.\nSo, the problem you are called to solve is how to optimize frequently re-trained operations with an optimized workflow system. Which solution among these proposals can best solve your needs?",
        "59": "You are working with Vertex AI, the managed ML Platform in GCP.\nYou are dealing with custom training and you are looking and studying the job progresses during the training service lifecycle.\nWhich of the following states are not correct?",
        "60": "Your team works for an international company with Google Cloud, and you develop, train and deploy several ML models with Tensorflow. You use many tools and techniques and you want to make your work leaner, faster, and more efficient.\nYou would like engineer-to-engineer assistance from both Google Cloud and Google\u2019s TensorFlow teams.\nHow is it possible? Which service?",
        "61": "You work for an important organization and your manager tasked you with a new classification model with lots of data drawn from the company Data Lake.\nThe big problem is that you don\u2019t have the labels for all the data, but for only a subset of it and you have very little time to complete the task.\nWhich of the following services could help you?",
        "62": "Your team is working with a great number of ML projects, especially with Tensorflow.\nYou recently prepared a DNN model for image recognition that works well and is about to be rolled out in production.\nYour manager asked you to demonstrate the inner workings of the model.\nIt is a big problem for you because you know that it is working well but you don\u2019t have the explainability of the model.\nWhich of these techniques could help you?",
        "63": "You work as a Data Scientist in a Startup and you work with several project with Python and Tensorflow;\nYou need to increase the performance of the training sessions and you already use caching and prefetching.\nSo now you want to use GPUs, but in a single machine, for cost reduction and experimentations.\nWhich of the following is the correct strategy?",
        "64": "Your team is designing a financial analysis model for a major Bank. \nThe requirements are: \nVarious banking applications will send transactions to the new system both in \nreal-time and in batch in standard/normalized format \nThe data will be stored in a repository \nStructured Data will be trained and retrained \nLabels are drawn from the data. \nYou need to prepare the model quickly and decide to use Auto ML for structured \nData. \nWhich GCP Services could you use (pick 3)?",
        "65": "You work for an industrial company that wants to improve its quality system. It \nhas developed its own deep neural network model with Tensorflow to identify the \nsemi-finished products to be discarded with images taken from the production \nlines in the various production phases. \nYou need to monitor the performance of your models and let them go faster.",
        "66": "You have a customer ranking ML model in production for an e-commerce site; the \nmodel used to work very well. \nYou use GCP managed services, specifically AI Platform and Vertex AI. \nSuddenly, there is a sensible degradation in the quality of the inferences. You \nperform various checks, but the model seems to be perfectly fine. \nFinally, you control the input data and notice that the frequency distributions \nhave changed for a specific feature. \nWhich GCP service can be helpful for you to manage features in a more organized \nway?",
        "67": "You have a customer ranking ML model in production for an e-commerce site; the \nmodel used to work very well. You use GCP managed services, specifically AI \nPlatform and Vertex AI. Suddenly there is a sensible degradation in the quality of \nthe inferences. You perform various checks, but the model seems to be perfectly \nfine. \nWhich of the following methods could you use to avoid such problems?",
        "68": "Your company runs a big retail website. You develop many ML models for all the \nbusiness activities. You migrated to Google Cloud when you were using Vertex AI. \nYour models are developed with PyTorch, TensorFlow and BigQueryML. \nYou also use BigTable and CloudSQL, and of course Cloud Storage. In many cases, \nthe same data is used for multiple models and projects. And your data is \ncontinuously updated, sometimes in streaming mode. \nWhich is the best way to organize the input data?"
    },
    "answers": {
        "1": {
            "A": [
                "1 = Dataflow, 2 = AI Platform, 3 = BigQuery",
                true
            ],
            "B": [
                "1 = DataProc, 2 = AutoML, 3 = Cloud Bigtable",
                false
            ],
            "C": [
                "1 = BigQuery, 2 = AutoML, 3 = Cloud Functions",
                false
            ],
            "D": [
                "1 = BigQuery, 2 = AI Platform, 3 = Cloud Storage",
                false
            ]
        },
        "2": {
            "A": [
                "1. Build a tree-based regression model that predicts how many passengers will be picked up at each shuttle station. 2. Dispatch an appropriately sized shuttle and provide the map with the required stops based on the prediction.",
                false
            ],
            "B": [
                "1. Build a tree-based classification model that predicts whether the shuttle should pick up passengers at each shuttle station. 2. Dispatch an available shuttle and provide the map with the required stops based on the prediction.",
                false
            ],
            "C": [
                "1. Define the optimal route as the shortest route that passes by all shuttle stations with confirmed attendance at the given time under capacity constraints. 2. Dispatch an appropriately sized shuttle and indicate the required stops on the map.",
                true
            ],
            "D": [
                "1. Build a reinforcement learning model with tree-based classification models that predict the presence of passengers at shuttle stops as agents and a reward function around a distance-based metric. 2. Dispatch an appropriately sized shuttle and provide the map with the required stops based on the simulated outcome.",
                false
            ]
        },
        "3": {
            "A": [
                "Use the class distribution to generate 10% positive examples.",
                false
            ],
            "B": [
                "Use a convolutional neural network with max pooling and softmax activation.",
                false
            ],
            "C": [
                "Downsample the data with upweighting to create a sample with 10% positive examples.",
                true
            ],
            "D": [
                "Remove negative examples until the numbers of positive and negative examples are equal.",
                false
            ]
        },
        "4": {
            "A": [
                "Use Data Fusion's GUI to build the transformation pipelines, and then write the data into BigQuery.",
                false
            ],
            "B": [
                "Convert your PySpark into SparkSQL queries to transform the data, and then run your pipeline on Dataproc to write the data into BigQuery.",
                false
            ],
            "C": [
                "Ingest your data into Cloud SQL, convert your PySpark commands into SQL queries to transform the data, and then use federated queries from BigQuery for machine learning.",
                false
            ],
            "D": [
                "Ingest your data into BigQuery using BigQuery Load, convert your PySpark commands into BigQuery SQL queries to transform the data, and then write the transformations to a new table.",
                true
            ]
        },
        "5": {
            "A": [
                "Use the AI Platform custom containers feature to receive training jobs using any framework.",
                true
            ],
            "B": [
                "Configure Kubeflow to run on Google Kubernetes Engine and receive training jobs through TF Job.",
                false
            ],
            "C": [
                "Create a library of VM images on Compute Engine, and publish these images on a centralized repository.",
                false
            ],
            "D": [
                "Set up Slurm workload manager to receive jobs that can be scheduled to run on your cloud infrastructure.",
                false
            ]
        },
        "6": {
            "A": [
                "Keep the original test dataset unchanged even if newer products are incorporated into retraining.",
                false
            ],
            "B": [
                "Extend your test dataset with images of the newer products when they are introduced to retraining.",
                true
            ],
            "C": [
                "Replace your test dataset with images of the newer products when they are introduced to retraining.",
                false
            ],
            "D": [
                "Update your test dataset with images of the newer products when your evaluation metrics drop below a pre-decided threshold.",
                false
            ]
        },
        "7": {
            "A": [
                "Configure AutoML Tables to perform the classification task.",
                true
            ],
            "B": [
                "Run a BigQuery ML task to perform logistic regression for the classification.",
                false
            ],
            "C": [
                "Use AI Platform Notebooks to run the classification model with pandas library.",
                false
            ],
            "D": [
                "Use AI Platform to run the classification model job configured for hyperparameter tuning.",
                false
            ]
        },
        "8": {
            "A": [
                "Configure Kubeflow Pipelines to schedule your multi-step workflow from training to deploying your model.",
                true
            ],
            "B": [
                "Use a model trained and deployed on BigQuery ML, and trigger retraining with the scheduled query feature in BigQuery.",
                false
            ],
            "C": [
                "Write a Cloud Functions script that launches a training and deploying job on AI Platform that is triggered by Cloud Scheduler.",
                false
            ],
            "D": [
                "Use Cloud Composer to programmatically schedule a Dataflow job that executes the workflow from training to deploying your model.",
                false
            ]
        },
        "9": {
            "A": [
                "Use Cloud Functions to identify changes to your code in Cloud Storage and trigger a retraining job.",
                false
            ],
            "B": [
                "Use the gcloud command-line tool to submit training jobs on AI Platform when you update your code.",
                false
            ],
            "C": [
                "Use Cloud Build linked with Cloud Source Repositories to trigger retraining when new code is pushed to the repository.",
                true
            ],
            "D": [
                "Create an automated workflow in Cloud Composer that runs daily and looks for changes in code in Cloud Storage using a sensor.",
                false
            ]
        },
        "10": {
            "A": [
                "Categorical hinge",
                false
            ],
            "B": [
                "Binary cross-entropy",
                false
            ],
            "C": [
                "Categorical cross-entropy",
                false
            ],
            "D": [
                "Sparse categorical cross-entropy",
                true
            ]
        },
        "11": {
            "A": [
                "Use the `Other Products You May Like` recommendation type to increase the click-through rate.",
                false
            ],
            "B": [
                "Use the `Frequently Bought Together` recommendation type to increase the shopping cart size for each order.",
                true
            ],
            "C": [
                "Import your user events and then your product catalog to make sure you have the highest quality event stream.",
                false
            ],
            "D": [
                "Because it will take time to collect and record product data, use placeholder values for the product catalog to test the viability of the model.",
                false
            ]
        },
        "12": {
            "A": [
                "1 = AI Platform, 2 = AI Platform, 3 = AutoML Vision",
                false
            ],
            "B": [
                "1 = AI Platform, 2 = AI Platform, 3 = AutoML Natural Language",
                false
            ],
            "C": [
                "1 = AI Platform, 2 = AI Platform, 3 = Cloud Natural Language API",
                true
            ],
            "D": [
                "1 = Cloud Natural Language API, 2 = AI Platform, 3 = Cloud Vision API",
                false
            ]
        },
        "13": {
            "A": [
                "Apply a dropout parameter of 0.2, and decrease the learning rate by a factor of 10.",
                false
            ],
            "B": [
                "Apply a L2 regularization parameter of 0.4, and decrease the learning rate by a factor of 10.",
                false
            ],
            "C": [
                "Run a hyperparameter tuning job on AI Platform to optimize for the L2 regularization and dropout parameters.",
                true
            ],
            "D": [
                "Run a hyperparameter tuning job on AI Platform to optimize for the learning rate, and increase the number of neurons by a factor of 2.",
                false
            ]
        },
        "14": {
            "A": [
                "Poor data quality",
                false
            ],
            "B": [
                "Lack of model retraining",
                true
            ],
            "C": [
                "Too few layers in the model for capturing information",
                false
            ],
            "D": [
                "Incorrect data split ratio during model training, evaluation, validation, and test",
                false
            ]
        },
        "15": {
            "A": [
                "Create a tf.data.Dataset.prefetch transformation.",
                false
            ],
            "B": [
                "Convert the images to tf.Tensor objects, and then run Dataset.from_tensor_slices().",
                false
            ],
            "C": [
                "Convert the images to tf.Tensor objects, and then run tf.data.Dataset.from_tensors().",
                false
            ],
            "D": [
                "Convert the images into TFRecords, store the images in Cloud Storage, and then use the tf.data API to read the images for training.",
                true
            ]
        },
        "16": {
            "A": [
                "Classification",
                false
            ],
            "B": [
                "Reinforcement Learning",
                false
            ],
            "C": [
                "Recurrent Neural Networks (RNN)",
                true
            ],
            "D": [
                "Convolutional Neural Networks (CNN)",
                false
            ]
        },
        "17": {
            "A": [
                "Stream all files to Google Cloud, and then write the data to BigQuery. Periodically conduct a bulk scan of the table using the DLP API.",
                false
            ],
            "B": [
                "Stream all files to Google Cloud, and write batches of the data to BigQuery. While the data is being written to BigQuery, conduct a bulk scan of the data using the DLP API.",
                false
            ],
            "C": [
                "Create two buckets of data: Sensitive and Non-sensitive. Write all data to the Non-sensitive bucket. Periodically conduct a bulk scan of that bucket using the DLP API, and move the sensitive data to the Sensitive bucket.",
                false
            ],
            "D": [
                "Create three buckets of data: Quarantine, Sensitive, and Non-sensitive. Write all data to the Quarantine bucket. Periodically conduct a bulk scan of that bucket using the DLP API, and move the data to either the Sensitive or Non-Sensitive bucket.",
                true
            ]
        },
        "18": {
            "A": [
                "Manually combine all columns that contain a time signal into an array. AIlow AutoML to interpret this array appropriately. Choose an automatic data split across the training, validation, and testing sets.",
                false
            ],
            "B": [
                "Submit the data for training without performing any manual transformations. AIlow AutoML to handle the appropriate transformations. Choose an automatic data split across the training, validation, and testing sets.",
                false
            ],
            "C": [
                "Submit the data for training without performing any manual transformations, and indicate an appropriate column as the Time column. AIlow AutoML to split your data based on the time signal provided, and reserve the more recent data for the validation and testing sets.",
                false
            ],
            "D": [
                "Submit the data for training without performing any manual transformations. Use the columns that have a time signal to manually split your data. Ensure that the data in your validation set is from 30 days after the data in your training set and that the data in your testing sets from 30 days after your validation set.",
                true
            ]
        },
        "19": {
            "A": [
                "Write a script that sequentially performs the push to your development branch and executes the unit tests on Cloud Run.",
                false
            ],
            "B": [
                "Using Cloud Build, set an automated trigger to execute the unit tests when changes are pushed to your development branch.",
                true
            ],
            "C": [
                "Set up a Cloud Logging sink to a Pub/Sub topic that captures interactions with Cloud Source Repositories. Configure a Pub/Sub trigger for Cloud Run, and execute the unit tests on Cloud Run.",
                false
            ],
            "D": [
                "Set up a Cloud Logging sink to a Pub/Sub topic that captures interactions with Cloud Source Repositories. Execute the unit tests using a Cloud Function that is triggered when messages are sent to the Pub/Sub topic.",
                false
            ]
        },
        "20": {
            "A": [
                "Modify the 'epochs' parameter.",
                false
            ],
            "B": [
                "Modify the 'scale-tier' parameter.",
                true
            ],
            "C": [
                "Modify the 'batch size' parameter.",
                false
            ],
            "D": [
                "Modify the 'learning rate' parameter.",
                false
            ]
        },
        "21": {
            "A": [
                "Compare the loss performance for each model on a held-out dataset.",
                false
            ],
            "B": [
                "Compare the loss performance for each model on the validation data.",
                false
            ],
            "C": [
                "Compare the receiver operating characteristic (ROC) curve for each model using the What-If Tool.",
                false
            ],
            "D": [
                "Compare the mean average precision across the models using the Continuous Evaluation feature.",
                true
            ]
        },
        "22": {
            "A": [
                "data = json.dumps({`signature_name`: `seving_default`, `instances` [['ab', 'bc', 'cd']]})",
                false
            ],
            "B": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b', 'c', 'd', 'e', 'f']]})",
                false
            ],
            "C": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b', 'c'], ['d', 'e', 'f']]})",
                false
            ],
            "D": [
                "data = json.dumps({`signature_name`: `serving_default`, `instances` [['a', 'b'], ['c', 'd'], ['e', 'f']]})",
                true
            ]
        },
        "23": {
            "A": [
                "1= Dataflow, 2= BigQuery",
                true
            ],
            "B": [
                "1 = Pub/Sub, 2= Datastore",
                false
            ],
            "C": [
                "1 = Dataflow, 2 = Cloud SQL",
                false
            ],
            "D": [
                "1 = Cloud Function, 2= Cloud SQL",
                false
            ]
        },
        "24": {
            "A": [
                "Build a classification model",
                false
            ],
            "B": [
                "Build a knowledge-based filtering model",
                false
            ],
            "C": [
                "Build a collaborative-based filtering model",
                true
            ],
            "D": [
                "Build a regression model using the features as predictors",
                false
            ]
        },
        "25": {
            "A": [
                "Increase the recall.",
                false
            ],
            "B": [
                "Decrease the recall.",
                true
            ],
            "C": [
                "Increase the number of false positives.",
                false
            ],
            "D": [
                "Decrease the number of false negatives.",
                false
            ]
        },
        "26": {
            "A": [
                "Dataflow",
                false
            ],
            "B": [
                "Dataprep",
                false
            ],
            "C": [
                "Apache Flink",
                false
            ],
            "D": [
                "Cloud Data Fusion",
                true
            ]
        },
        "27": {
            "A": [
                "Redaction, reproducibility, and explainability",
                false
            ],
            "B": [
                "Traceability, reproducibility, and explainability",
                true
            ],
            "C": [
                "Federated learning, reproducibility, and explainability",
                false
            ],
            "D": [
                "Differential privacy, federated learning, and explainability",
                false
            ]
        },
        "28": {
            "A": [
                "Use the interleave option for reading data.",
                true
            ],
            "B": [
                "Reduce the value of the repeat parameter.",
                false
            ],
            "C": [
                "Increase the buffer size for the shuttle option.",
                false
            ],
            "D": [
                "Set the prefetch option equal to the training batch size.",
                true
            ],
            "E": [
                "Decrease the batch size argument in your transformation.",
                false
            ]
        },
        "29": {
            "A": [
                "Create two folders: one where the logo appears and one where it doesn\u2019t. Manually place images in each folder. Use AI Platform to build and train a real time object detection model.",
                false
            ],
            "B": [
                "Use Vision API to detect and identify logos in pictures and use it as a label. Use AI Platform to build and train a convolutional neural network.",
                false
            ],
            "C": [
                "Create two folders: one where the logo appears and one where it doesn\u2019t. Manually place images in each folder. Use AI Platform to build and train a convolutional neural network.",
                false
            ],
            "D": [
                "Use Google Cloud\u2019s Data Labelling Service to label your data. Use AutoML Object Detection to train and deploy the model.",
                true
            ]
        },
        "30": {
            "A": [
                "Use a Cloud TPU to optimize model training speed.",
                false
            ],
            "B": [
                "Use AI Platform Prediction with a NVIDIA GPU to make real-time predictions.",
                true
            ],
            "C": [
                "Use AI Platform Prediction with a high-CPU machine type to get a batch prediction for the players.",
                false
            ],
            "D": [
                "Use AI Platform Prediction with a high-memory machine type to get a batch prediction for the players.",
                false
            ]
        },
        "31": {
            "A": [
                "Use the Integrated Gradients method to efficiently compute feature attributions for each predicted image.",
                true
            ],
            "B": [
                "Use K-fold cross validation to understand how the model performs on different test datasets.",
                false
            ],
            "C": [
                "Use PCA (Principal Component Analysis) to reduce the original feature set to a smaller set of easily understood features.",
                false
            ],
            "D": [
                "Use k-means clustering to group similar images together, and calculate the Davies-Bouldin index to evaluate the separation between clusters.",
                false
            ]
        },
        "32": {
            "A": [
                "Automate a blend of the shortest and longest intents to be representative of all intents.",
                false
            ],
            "B": [
                "Automate the more complicated requests first because those require more of the agents\u2019 time.",
                false
            ],
            "C": [
                "Automate the 10 intents that cover 70% of the requests so that live agents can handle the more complicated requests.",
                true
            ],
            "D": [
                "Automate intents in places where common words such as \u201cpayment\u201d only appear once to avoid confusing the software.",
                false
            ]
        },
        "33": {
            "A": [
                "Data preparation: Daily max value feature engineering; Model training: AutoML classification with BQML",
                false
            ],
            "B": [
                "Data preparation: Daily min value feature engineering; Model training: Logistic regression with BQML and AUTO_CLASS_WEIGHTS set to True",
                false
            ],
            "C": [
                "Data preparation: Rolling average feature engineering; Model training: Logistic regression with BQML and AUTO_CLASS_WEIGHTS set to False",
                false
            ],
            "D": [
                "Data preparation: Rolling average feature engineering; Model training: Logistic regression with BQML and AUTO_CLASS_WEIGHTS set to True",
                true
            ]
        },
        "34": {
            "A": [
                "Deploy model in test environment -> Evaluate and test model -> Create a new AI Platform model version",
                true
            ],
            "B": [
                "Validate model -> Deploy model in test environment -> Create a new AI Platform model version",
                false
            ],
            "C": [
                "Create a new AI Platform model version -> Evaluate and test model -> Deploy model in test environment",
                false
            ],
            "D": [
                "Create a new AI Platform model version - > Deploy model in test environment -> Validate model\n",
                false
            ]
        },
        "35": {
            "A": [
                "Pub/Sub, Cloud Function, Cloud Vision API",
                false
            ],
            "B": [
                "Pub/Sub, Cloud IoT, Dataflow, Cloud Vision API, Cloud Logging",
                false
            ],
            "C": [
                "Pub/Sub, Cloud Function, Video Intelligence API, Cloud Logging",
                true
            ],
            "D": [
                "Pub/Sub, Cloud Function, AutoML Video Intelligence, Cloud Logging",
                false
            ]
        },
        "36": {
            "A": [
                "Default Strategy; Custom tier with a single master node and four v100 GPUs.",
                false
            ],
            "B": [
                "One Device Strategy; Custom tier with a single master node and four v100 GPUs.",
                false
            ],
            "C": [
                "One Device Strategy; Custom tier with a single master node and eight v100 GPUs.",
                false
            ],
            "D": [
                "MirroredStrategy; Custom tier with a single master node and four v100 GPUs.",
                true
            ]
        },
        "37": {
            "A": [
                "Load data into BigQuery and use the ARIMA model type on BigQuery ML.",
                true
            ],
            "B": [
                "Convert the data into CSV format and create a regression model on AutoML Tables.",
                false
            ],
            "C": [
                "Convert the data into TFRecords and create an RNN model on TensorFlow on AI Platform Notebooks.",
                false
            ],
            "D": [
                "Convert and refactor the data into CSV format and use the built-in XGBoost algorithm on AI Platform Training.",
                false
            ]
        },
        "38": {
            "A": [
                "Train the model for a few iterations, and check for NaN values.",
                false
            ],
            "B": [
                "Train the model with no regularization, and verify that the loss function is close to zero.",
                true
            ],
            "C": [
                "Train a simple linear model, and determine if the DNN model outperforms it.",
                false
            ],
            "D": [
                "Train the model for a few iterations, and verify that the loss is constant.",
                false
            ]
        },
        "39": {
            "A": [
                "K-means ",
                false
            ],
            "B": [
                "Q-learning",
                true
            ],
            "C": [
                "K-Nearest Neighbors",
                false
            ],
            "D": [
                "Support Vector Machine(SVM)",
                false
            ]
        },
        "40": {
            "A": [
                "Create a Tensorflow model using Matrix factorization",
                false
            ],
            "B": [
                "Use Recommendations AI ",
                true
            ],
            "C": [
                "Import the Product Catalog",
                false
            ],
            "D": [
                "Record / Import User events",
                false
            ]
        },
        "41": {
            "A": [
                "Count Vector",
                false
            ],
            "B": [
                "TF-IDF Vector",
                false
            ],
            "C": [
                "Co-Occurrence Matrix ",
                false
            ],
            "D": [
                "CoVariance Matrix",
                true
            ]
        },
        "42": {
            "A": [
                "Cross-Validation",
                false
            ],
            "B": [
                "Regularization",
                false
            ],
            "C": [
                "Hyperparameter tuning",
                true
            ],
            "D": [
                "drift detection management",
                false
            ]
        },
        "43": {
            "A": [
                "Dialogflow",
                false
            ],
            "B": [
                "Document AI",
                true
            ],
            "C": [
                "Cloud Natural Language API",
                false
            ],
            "D": [
                "AutoML",
                false
            ]
        },
        "44": {
            "A": [
                "AutoML Tables",
                true
            ],
            "B": [
                "BigQuery ML",
                false
            ],
            "C": [
                "Vertex AI",
                true
            ],
            "D": [
                "GKE",
                false
            ]
        },
        "45": {
            "A": [
                "AutoML Vision Edge",
                false
            ],
            "B": [
                "Vision AI",
                false
            ],
            "C": [
                "Video AI",
                false
            ],
            "D": [
                "AutoML Vision",
                true
            ]
        },
        "46": {
            "A": [
                "Use scale-tier to BASIC_TPU",
                true
            ],
            "B": [
                "Set Master-machine-type",
                false
            ],
            "C": [
                "Set Worker-machine-type",
                false
            ],
            "D": [
                "Set parameterServerType",
                false
            ]
        },
        "47": {
            "A": [
                "TFProfiler",
                true
            ],
            "B": [
                "TF function",
                false
            ],
            "C": [
                "TF Trace",
                false
            ],
            "D": [
                "TF Debugger",
                false
            ],
            "E": [
                "TF Checkpoint",
                false
            ]
        },
        "48": {
            "A": [
                "AI Infrastructure",
                false
            ],
            "B": [
                "Cloud Video Intelligence AI",
                false
            ],
            "C": [
                "AutoML Video Intelligence Classification",
                true
            ],
            "D": [
                "Vision AI",
                false
            ]
        },
        "49": {
            "A": [
                "AI Platform Prediction",
                true
            ],
            "B": [
                "GKE e TensorFlow",
                false
            ],
            "C": [
                "VMs and Autoscaling Groups with Application LB",
                false
            ],
            "D": [
                "Kubeflow",
                false
            ]
        },
        "50": {
            "A": [
                "Use tf.data.Dataset",
                true
            ],
            "B": [
                "Use a queue with tf.train.shuffle_batch",
                false
            ],
            "C": [
                "Use pandas.DataFrame",
                false
            ],
            "D": [
                "Use a NumPy array",
                false
            ]
        },
        "51": {
            "A": [
                "Scaling to a range",
                false
            ],
            "B": [
                "Feature Clipping",
                false
            ],
            "C": [
                "Z-test ",
                true
            ],
            "D": [
                "log scaling",
                false
            ],
            "E": [
                "Z-score",
                false
            ]
        },
        "52": {
            "A": [
                "TabNet algorithm with TensorFlow",
                false
            ],
            "B": [
                "A linear learner with Tensorflow Estimator API",
                false
            ],
            "C": [
                "XGBoost with BigQueryML ",
                false
            ],
            "D": [
                "TensorFlow Object Detection API",
                true
            ]
        },
        "53": {
            "A": [
                "Blending",
                false
            ],
            "B": [
                "Learning Rate",
                false
            ],
            "C": [
                "Feature Cross",
                false
            ],
            "D": [
                "Bagging",
                false
            ],
            "E": [
                "Variance",
                true
            ]
        },
        "54": {
            "A": [
                "Feature Crosses",
                false
            ],
            "B": [
                "Principal component analysis (PCA)",
                true
            ],
            "C": [
                "Embeddings",
                false
            ],
            "D": [
                "Functional Data Analysis",
                false
            ]
        },
        "55": {
            "A": [
                "Hierarchical Clustering ",
                false
            ],
            "B": [
                "Autoencoder and self-encoder",
                false
            ],
            "C": [
                "Convolutional Neural Network",
                false
            ],
            "D": [
                "Collaborative filtering using Matrix Factorization",
                true
            ]
        },
        "56": {
            "A": [
                "Format-preserving encryption",
                false
            ],
            "B": [
                "K-anonymity",
                false
            ],
            "C": [
                "Replacement",
                false
            ],
            "D": [
                "Masking",
                true
            ]
        },
        "57": {
            "A": [
                "TensorFlow Hub",
                false
            ],
            "B": [
                "TensorFlow Probability",
                true
            ],
            "C": [
                "TensorFlow Enterprise",
                false
            ],
            "D": [
                "TensorFlow Statistics",
                false
            ]
        },
        "58": {
            "A": [
                "Deploy the model on BigQuery ML and setup a job",
                false
            ],
            "B": [
                "Use Kubeflow Pipelines to design and execute your workflow",
                true
            ],
            "C": [
                "Use AI Platform",
                false
            ],
            "D": [
                "Orchestrate activities with Google Cloud Workflows",
                false
            ],
            "E": [
                "Develop procedures with Pub/Sub and Cloud Run",
                false
            ],
            "F": [
                "Schedule processes with Cloud Composer",
                false
            ]
        },
        "59": {
            "A": [
                "JOB_STATE_ACTIVE",
                true
            ],
            "B": [
                "JOB_STATE_RUNNING",
                false
            ],
            "C": [
                "JOB_STATE_QUEUED",
                false
            ],
            "D": [
                "JOB_STATE_ENDED",
                false
            ]
        },
        "60": {
            "A": [
                "AI Platform",
                false
            ],
            "B": [
                "Kubeflow",
                false
            ],
            "C": [
                "Tensorflow Enterprise",
                true
            ],
            "D": [
                "TFX",
                false
            ]
        },
        "61": {
            "A": [
                "Vertex Data Labeling",
                true
            ],
            "B": [
                "Mechanical Turk",
                false
            ],
            "C": [
                "GitLab ML",
                false
            ],
            "D": [
                "Tag Manager",
                false
            ]
        },
        "62": {
            "A": [
                "Integrated Gradient",
                true
            ],
            "B": [
                "LIT",
                false
            ],
            "C": [
                "WIT",
                false
            ],
            "D": [
                "PCA",
                false
            ]
        },
        "63": {
            "A": [
                "tf.distribute.MirroredStrategy",
                true
            ],
            "B": [
                "tf.distribute.TPUStrategy",
                false
            ],
            "C": [
                "tf.distribute.MultiWorkerMirroredStrategy",
                false
            ],
            "D": [
                "tf.distribute.OneDeviceStrategy",
                false
            ]
        },
        "64": {
            "A": [
                "AutoML Tables",
                true
            ],
            "B": [
                "AI Platform ",
                false
            ],
            "C": [
                "BigQuery ML",
                true
            ],
            "D": [
                "Vertex AI",
                true
            ]
        },
        "65": {
            "A": [
                "TFProfiler",
                true
            ],
            "B": [
                "TF function",
                false
            ],
            "C": [
                "TF Trace",
                false
            ],
            "D": [
                "TF Debugger",
                false
            ],
            "E": [
                "TF Checkpoint",
                false
            ]
        },
        "66": {
            "A": [
                "Regularization against overfitting ",
                false
            ],
            "B": [
                "Feature Store",
                true
            ],
            "C": [
                "Hyperparameters tuning ",
                false
            ],
            "D": [
                "Model Monitoring",
                false
            ]
        },
        "67": {
            "A": [
                "Regularization against overfitting",
                false
            ],
            "B": [
                "Feature Store",
                false
            ],
            "C": [
                "Hyperparameter tuning",
                false
            ],
            "D": [
                "Model Monitoring",
                true
            ]
        },
        "68": {
            "A": [
                "Dataflow per Data Transformation sia in streaming che batch",
                false
            ],
            "B": [
                "CSV",
                false
            ],
            "C": [
                "BigQuery",
                false
            ],
            "D": [
                "Datasets",
                true
            ],
            "E": [
                "BigTable",
                false
            ]
        }
    },
    "images": {
        "1": false,
        "2": false,
        "3": false,
        "4": false,
        "5": false,
        "6": false,
        "7": false,
        "8": false,
        "9": false,
        "10": false,
        "11": false,
        "12": "quiz_data_devlop/images/ml_questions/q12.png",
        "13": false,
        "14": false,
        "15": false,
        "16": false,
        "17": false,
        "18": false,
        "19": false,
        "20": false,
        "21": false,
        "22": "quiz_data_devlop/images/ml_questions/q22.png",
        "23": "quiz_data_devlop/images/ml_questions/q23.png",
        "24": false,
        "25": false,
        "26": false,
        "27": false,
        "28": false,
        "29": false,
        "30": false,
        "31": false,
        "32": false,
        "33": false,
        "34": false,
        "35": false,
        "36": false,
        "37": false,
        "38": false,
        "39": false,
        "40": false,
        "41": false,
        "42": false,
        "43": false,
        "44": false,
        "45": false,
        "46": false,
        "47": false,
        "48": false,
        "49": false,
        "50": false,
        "51": false,
        "52": false,
        "53": false,
        "54": false,
        "55": false,
        "56": false,
        "57": false,
        "58": false,
        "59": false,
        "60": false,
        "61": false,
        "62": false,
        "63": false,
        "64": false,
        "65": false,
        "66": false,
        "67": false,
        "68": false
    },
    "multiple_choice": {
        "1": false,
        "2": false,
        "3": false,
        "4": false,
        "5": false,
        "6": false,
        "7": false,
        "8": false,
        "9": false,
        "10": false,
        "11": false,
        "12": false,
        "13": false,
        "14": false,
        "15": false,
        "16": false,
        "17": false,
        "18": false,
        "19": false,
        "20": false,
        "21": false,
        "22": false,
        "23": false,
        "24": false,
        "25": false,
        "26": false,
        "27": false,
        "28": true,
        "29": false,
        "30": false,
        "31": false,
        "32": false,
        "33": false,
        "34": false,
        "35": false,
        "36": false,
        "37": false,
        "38": false,
        "39": false,
        "40": false,
        "41": false,
        "42": false,
        "43": false,
        "44": true,
        "45": false,
        "46": false,
        "47": false,
        "48": false,
        "49": false,
        "50": false,
        "51": false,
        "52": false,
        "53": false,
        "54": false,
        "55": false,
        "56": false,
        "57": false,
        "58": false,
        "59": false,
        "60": false,
        "61": false,
        "62": false,
        "63": false,
        "64": true,
        "65": false,
        "66": false,
        "67": false,
        "68": false
    }
}